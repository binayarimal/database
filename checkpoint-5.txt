How do you find related data held in two separate data tables?
We can find related data by using JOIN method on datas that are related to each other.

Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

INNER JOIN returns all the values that match.
Example: Allowing people in a plane whose ticket number matches with the number in the system.

LEFT OUTER JOIN returns all the values that matches, and the value from the table you choose to join to(primary key) with null in place of the missing spots.
Example:putting spices on dishes based on recepies, after the recepies are cooked if there are spices that you didn't use, you have both that and the recepies that you paired the spices with.

RIGHT OUTER JOIN returns all the value that matches and the value from the joined table and the null value in place of the missing spots.
Example:Example: plugging all the cords in a computer since after all the cords are connected the empty spot still remains.


Define primary key and foreign key. Give a real-world example for each.
Primary key is the main key, it is the unique identifier that only exists once in the entire table.
For example : Backup dancer coordinating to the main dancer, the main dancer would be the Primary key.
Foreign Key is key that you compare with the Primary key.
For example: The many music covers in youtube , the covers are the foreign key.

Define aliasing.
Aliasing is the prosess of abbreviating by using an alias, we can name the table as something short and define it AS the table we choose to use, and then use the abbreviated version in the command line.

Change this query so that you are using aliasing:
SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;

SELECT p.name,c.salary,c.vacation_days 
FROM p AS professor
JOIN c AS compensation
ON p.id=c.professor_id;

Why would you use a NATURAL JOIN? Give a real-world example.
 NATURAL JOIN It selects the lists consisting of only the column names that appear in both input tables.
Example:Selecting name of the primary member from the insurance plan from a list to check to check who is in the same family plan.

Using this Employee schema and data, write queries to find the following information:
List all employees and all shifts.
SELECT employees, shifts
FROM employees
RIGHT OUTER JOIN shifts
USING(id);

Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
 
SELECT volunteers ,dogs
FROM volunteers
LEFT OUTER JOIN dogs
ON dogs.id= volunteers.foster_dog_id;

The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

SELECT cats.name,adopters.first_name,adopters.last_name,cat_adoptions.date
FROM cat_adoptions
JOIN cats ON cats.id=cat_adoptions.cat_id
JOIN adopters ON adopters.id = cat_adoptions.adopter_id
WHERE cat_adoptions.date > NOW() - INTERVAL '28 days'

Create a list of adopters who have not yet chosen a dog to adopt.
SELECT adopters 
FROM adopters
JOIN dog_adoptions
ON adopters.id<>dog_adoptions.adopter_id;

Lists of all cats and all dogs who have not been adopted.
SELECT cats
FROM cat_adoptions
RIGHT OUTER JOIN cats
ON cat_adoptions.cat_id = cats.id
WHERE cat_adoptions.date IS null;

SELECT dogs 
FROM dog_adoptions
RIGHT OUTER JOIN dogs
ON dog_adoptions.dog_id =dogs.id
WHERE dog_adoptions.date IS null;

The name of the person who adopted Rosco.
SELECT adopters.first_name, adopters.last_name
FROM adopters 
JOIN dog_adoptions ON adopters.id=dog_adoptions.adopter_id

Using this Library schema and data, write queries applying the following scenarios and include the results:

To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

SELECT patrons.name, holds.rank
FROM holds
JOIN patrons ON patrons.id = holds.patron_id
JOIN books ON books.isbn=holds.isbn
WHERE books.title = 'Advanced Potion-Making'
ORDER BY holds.rank

List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

Select DISTINCT patrons.name,books.title
FROM transactions 
JOIN patrons
ON patrons.id = transactions.patron_id
LEFT OUTER JOIN books AS books
ON books.isbn = transactions.isbn AND
transactions.checked_in_date is NULL;